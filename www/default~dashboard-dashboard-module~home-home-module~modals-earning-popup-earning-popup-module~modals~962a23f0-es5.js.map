{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js"],"names":["MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","focusInitialElementWhenReady","previousElement","activeElement","element","body","contains","focusVia","destroy","create","ɵfac","_MatDialogContainerBase_Factory","t","ɵdir","type","viewQuery","_MatDialogContainerBase_Query","_t","first","features","ctorParameters","undefined","decorators","args","propDecorators","MatDialogContainer","arguments","_state","toState","totalTime","_trapFocus","next","state","_restoreFocus","markForCheck","MatDialogContainer_Factory","ɵMatDialogContainer_BaseFactory","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","_id","decls","vars","consts","template","MatDialogContainer_Template","directives","styles","encapsulation","animation","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","setTimeout","_startExitAnimation","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","ref","interactionType","result","close","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","afterOpened","_initializeWithAttachedContent","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","updateSize","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","_MatDialogBase_Factory","MatDialog","location","defaultOptions","parentDialog","MatDialog_Factory","ɵprov","token","factory","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","MatDialogClose_Factory","MatDialogClose_HostBindings","MatDialogClose_click_HostBindingHandler","_onButtonClick","inputs","_matDialogClose","exportAs","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","ɵmod","ɵinj","MatDialogModule_Factory","imports","ngJitMode","declarations","exports","entryComponents"],"mappings":"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","file":"default~dashboard-dashboard-module~home-home-module~modals-earning-popup-earning-popup-module~modals~962a23f0-es5.js","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = this._document.activeElement;\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatDialogContainerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return ɵMatDialogContainer_BaseFactory(t || MatDialogContainer); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\nconst ɵMatDialogContainer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\n_MatDialogBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map"]}